services:
  # -------------- PostgreSQL --------------
  postgres:
    image: postgres:16
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: n8n
      POSTGRES_USER: n8n
      POSTGRES_PASSWORD: n8npass
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - internal
    # 健康检查（新增）
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 10s
      timeout: 5s
      retries: 5

  # -------------- n8n --------------
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: n8n
      DB_POSTGRESDB_PASSWORD: n8npass
      TZ: Asia/Shanghai
      N8N_ENCRYPTION_KEY: changeMeKey
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: admin
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy  # 改进：等待 postgres 健康后再启动
    networks:
      - internal

  # -------------- YouTube 下载器 API 服务 --------------
  youtube-dl-api:
    build: 
      context: .
      dockerfile: Dockerfile
    platform: linux/arm64  # 支持 M1/M2 Mac
    container_name: youtube-dl-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # 代理配置
      HTTP_PROXY: "http://host.docker.internal:7890"
      HTTPS_PROXY: "http://host.docker.internal:7890"
      NO_PROXY: "localhost,127.0.0.1,n8n,postgres"
      # 应用配置
      DOWNLOADS_DIR: "/app/downloads"
      TZ: Asia/Shanghai
      # Python 优化配置（新增）
      PYTHONUNBUFFERED: "1"
      PYTHONDONTWRITEBYTECODE: "1"
    volumes:
      - ./downloads:/app/downloads
      - ./cookies:/app/cookies:ro
      # 可选：日志持久化
      # - ./logs:/app/logs
    networks:
      - internal
    # 资源限制（新增 - 防止过度占用系统资源）
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    # 健康检查（新增 - 使用已有的 /health 端点）
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      start_period: 10s
      retries: 3

networks:
  internal:
    driver: bridge

volumes:
  n8n_data:
  db_data:

